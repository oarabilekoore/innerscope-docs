var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);

// node_modules/innerscope/Dist/+innerscope.js
import "/home/oarabile-koore/Documents/DEV/innerscope-docs/node_modules/innerscope/Dist/baseline.css";
var version = "0.1.8";
console.log(`innerscope v${version}`);
var Application = class {
  constructor(config) {
    __publicField(this, "root");
    __publicField(this, "router_map");
    __publicField(this, "page_routes");
    __publicField(this, "router_mode");
    __publicField(this, "page_index", 0);
    this.router_map = /* @__PURE__ */ new Map();
    this.page_routes = null;
    this.router_mode = null;
    this.root = document.body;
    config ? this.setConfig(config) : console.error("Application config Was Not Passed.");
  }
  setConfig(cfg) {
    var _a, _b;
    this.router_mode = cfg.routes.mode;
    this.page_routes = cfg.routes.routes;
    this.page_index = ((_a = window.history.state) == null ? void 0 : _a.index) || 0;
    if (this.router_mode === "hash") {
      var route = window.location.hash.slice(1);
      window.onhashchange = (event) => {
        this.hash_change_handler(route);
      };
    } else if (this.router_mode === "history") {
      var route = window.location.pathname;
      window.onpopstate = (event) => {
        var _a2;
        const newIndex = ((_a2 = event.state) == null ? void 0 : _a2.index) || 0;
        this.page_index = newIndex;
        this.popstate_handler(route, event);
      };
    }
    (_b = this.page_routes) == null ? void 0 : _b.forEach((route2) => {
      this.addRoute(route2.path, route2.component);
    });
    if (cfg.title) {
      document.title = cfg.title;
    }
    if (cfg.statusbarcolor) {
      const meta = document.createElement("meta");
      meta.name = "theme-color";
      meta.content = cfg.statusbarcolor;
      document.head.appendChild(meta);
    }
    if (cfg.scrollbarvisibility) {
      if (cfg.scrollbarvisibility == "shown") {
        document.body.classList.remove(`noscrollbar`);
      } else
        document.body.classList.add(`noscrollbar`);
    }
    if (!cfg.allowzoom) {
      let meta = document.querySelector('meta[name="viewport"]');
      if (!meta) {
        meta = document.createElement("meta");
        meta.name = "viewport";
        document.head.appendChild(meta);
      }
      meta.content = "width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no";
    }
  }
  onExit(Fn) {
    window.addEventListener("beforeunload", (event) => {
      event.preventDefault();
      Fn(event);
    });
  }
  onBack(Fn) {
    window.addEventListener("popstate", (event) => {
      event.preventDefault();
      Fn(event);
    });
  }
  onStart(Fn) {
    window.addEventListener("load", (event) => {
      Fn(event);
    });
  }
  onPause(Fn) {
    window.addEventListener("blur", (event) => {
      Fn(event);
    });
  }
  onResume(Fn) {
    window.addEventListener("focus", (event) => {
      Fn(event);
    });
  }
  onOffline(Fn) {
    window.addEventListener("offline", (event) => {
      Fn(event);
    });
  }
  onOnline(Fn) {
    window.addEventListener("online", (event) => {
      Fn(event);
    });
  }
  onResize(Fn) {
    window.addEventListener("resize", (event) => {
      Fn(event);
    });
  }
  onScroll(Fn) {
    window.addEventListener("scroll", (event) => {
      Fn(event);
    });
  }
  addRoute(route, Function) {
    var _a;
    (_a = this.router_map) == null ? void 0 : _a.set(route, Function);
  }
  openRoute(path) {
    if (!this.does_route_exist(path)) {
      path = "/404";
    }
    if (this.router_mode == "hash") {
      this.hash_change_handler(path);
    } else
      this.popstate_handler(path);
  }
  hash_change_handler(route) {
  }
  popstate_handler(route, event) {
    var _a;
    const component = (_a = this.router_map) == null ? void 0 : _a.get(route);
    document.body.innerHTML = "";
    component ? component() : console.error();
    const newIndex = this.page_index + 1;
    this.page_index = newIndex;
    history.pushState({ index: newIndex }, "", route);
  }
  does_route_exist(path) {
    var _a;
    return (_a = this.router_map) == null ? void 0 : _a.has(path);
  }
};
function showIF(element, condition) {
  if (condition) {
    element.classList.add("show");
  } else {
    element.classList.add("hide");
  }
}
var LayoutConstructor = class {
  constructor(parent, type, classes) {
    __publicField(this, "root");
    __publicField(this, "layout");
    __publicField(this, "children");
    __publicField(this, "style");
    this.layout = document.createElement("div");
    if (parent instanceof HTMLElement) {
      parent.appendChild(this.layout);
    } else {
      parent.root.appendChild(this.layout);
    }
    if (parent === document.body) {
      document.body.style.margin = "0";
    }
    if (classes && typeof classes === "object") {
      for (let i = 0; classes.length < 0; i++) {
        this.layout.classList.add(classes[i]);
      }
    }
    this.layout.classList.add(`${type}-layout`, "show");
    this.style = this.layout.style;
    this.root = this.layout;
    this.children = [];
  }
  appendChild(child) {
    this.layout.appendChild(child);
    this.children.push(child);
  }
  removeChildren() {
    this.layout.innerHTML = "";
    this.children = [];
  }
  removeChild(child) {
    this.layout.removeChild(child);
    this.children = this.children.filter((c) => c !== child);
  }
  insertBefore(child, before) {
    this.layout.insertBefore(child, before);
  }
  set LayoutDirection(direction) {
    switch (direction) {
      case "TOP_TO_BOTTOM":
        this.layout.classList.add("top_to_bottom");
        break;
      case "BOTTOM_TO_TOP":
        this.layout.classList.add("bottom_to_top");
        break;
      case "LEFT_TO_RIGHT":
        this.layout.classList.add("left_to_right");
        break;
      default:
        this.layout.classList.add("RIGHT_TO_LEFT");
    }
  }
  set ElementAlignment(alignment) {
    this.layout.classList.add(alignment.toLowerCase());
  }
  set ParentFill(fill) {
    this.layout.classList.add(fill.toLowerCase());
  }
  set ScrollDirection(scrollDirection) {
    if (scrollDirection === "HORIZONTAL") {
      this.layout.classList.add("scrollx");
    } else if (scrollDirection === "VERTICAL") {
      this.layout.classList.add("scrolly");
    } else {
      this.layout.classList.add("scrollxy");
    }
  }
  set ScrollBarVisibility(visibility) {
    if (visibility === "SHOWN") {
      this.layout.classList.remove("noscrollbar");
    } else {
      this.layout.classList.add("noscrollbar");
    }
  }
};
function LinearLayout(parent, classList) {
  const layout = new LayoutConstructor(parent, "linear");
  return layout;
}
function ColumnLayout(parent) {
  const layout = new LayoutConstructor(parent, "column");
  layout.LayoutDirection = "TOP_TO_BOTTOM";
  return layout;
}
function GridLayout(parent) {
  const layout = new LayoutConstructor(parent, "grid");
  return layout;
}
function createElement(tag, parent, options) {
  const element = document.createElement(tag);
  if (options == null ? void 0 : options.content) {
    typeof options.content === "string" ? element.textContent = options.content : element.appendChild(options.content);
  }
  if (options == null ? void 0 : options.attrs) {
    for (const [key, value] of Object.entries(options.attrs)) {
      element.setAttribute(key, value);
    }
  }
  if (options == null ? void 0 : options.children) {
    options.children.forEach((child) => element.appendChild(child));
  }
  if (parent instanceof HTMLElement) {
    parent.appendChild(element);
  } else {
    parent.appendChild(element);
  }
  return element;
}
function genericElement(tag) {
  return function(...args) {
    let content;
    let attrs = {};
    let parent;
    if (args.length === 1) {
      parent = args[0];
    } else if (typeof args[0] === "string" && args.length === 2) {
      content = args[0];
      parent = args[1];
    } else if (typeof args[0] === "object" && args.length === 2) {
      attrs = args[0];
      parent = args[1];
    } else if (args.length === 3) {
      content = args[0];
      attrs = args[1];
      parent = args[2];
    } else {
      throw new Error("Invalid arguments: \n Referer To Error Directory [ERROR 100]");
    }
    return createElement(tag, parent, { content, attrs });
  };
}
var Paragraph = genericElement("p");
var Heading1 = genericElement("h1");
var Heading2 = genericElement("h2");
var Heading3 = genericElement("h3");
var Heading4 = genericElement("h4");
var Heading5 = genericElement("h5");
var Heading6 = genericElement("h6");
var Span = genericElement("span");
var Emphasis = genericElement("em");
var Strong = genericElement("strong");
var Code = genericElement("code");
var Preformatted = genericElement("pre");
var Blockquote = genericElement("blockquote");
var Quote = genericElement("q");
var Cite = genericElement("cite");
var Definition = genericElement("dfn");
var Abbreviation = genericElement("abbr");
var Time = genericElement("time");
var Variable = genericElement("var");
var SampleOutput = genericElement("samp");
var KeyboardInput = genericElement("kbd");
var Subscript = genericElement("sub");
var Superscript = genericElement("sup");
var SmallText = genericElement("small");
var MarkedText = genericElement("mark");
var DeletedText = genericElement("del");
var InsertedText = genericElement("ins");
var Button = genericElement("button");
var TextInput = genericElement("input");
var Checkbox = genericElement("input");
var Radio = genericElement("input");
var Range = genericElement("input");
var FileInput = genericElement("input");
var SubmitButton = genericElement("input");
var ResetButton = genericElement("input");
var ColorPicker = genericElement("input");
var DatePicker = genericElement("input");
var DateTimePicker = genericElement("input");
var EmailInput = genericElement("input");
var NumberInput = genericElement("input");
var PasswordInput = genericElement("input");
var SearchInput = genericElement("input");
var TelInput = genericElement("input");
var UrlInput = genericElement("input");
var TextArea = genericElement("textarea");
var Select = genericElement("select");
var Option = genericElement("option");
var Label = genericElement("label");
var Fieldset = genericElement("fieldset");
var Legend = genericElement("legend");
var Progress = genericElement("progress");
var Meter = genericElement("meter");
var Output = genericElement("output");
var Image = genericElement("img");
var Video = genericElement("video");
var Audio = genericElement("audio");
var Canvas = genericElement("canvas");
var Picture = genericElement("picture");
var Source = genericElement("source");
var Track = genericElement("track");
var Embed = genericElement("embed");
var ObjectEmbed = genericElement("object");
var IFrame = genericElement("iframe");
var HtmlMap = genericElement("map");
var Area = genericElement("area");
var Article = genericElement("article");
var Section = genericElement("section");
var Nav = genericElement("nav");
var Header = genericElement("header");
var Footer = genericElement("footer");
var Aside = genericElement("aside");
var Main = genericElement("main");
var Figure = genericElement("figure");
var Figcaption = genericElement("figcaption");
var Details = genericElement("details");
var Summary = genericElement("summary");
var Dialog = genericElement("dialog");
var Menu = genericElement("menu");
var Table = genericElement("table");
var TableHead = genericElement("thead");
var TableBody = genericElement("tbody");
var TableRow = genericElement("tr");
var TableHeader = genericElement("th");
var TableData = genericElement("td");
var TableCaption = genericElement("caption");
var ColGroup = genericElement("colgroup");
var Col = genericElement("col");
var OrderedList = genericElement("ol");
var UnorderedList = genericElement("ul");
var ListItem = genericElement("li");
var DescriptionList = genericElement("dl");
var DescriptionTerm = genericElement("dt");
var DescriptionDetail = genericElement("dd");
var Form = genericElement("form");
var LabelFor = (forId, content, parent) => {
  return createElement("label", parent, { content, attrs: { for: forId } });
};
var Style = genericElement("style");
var Link = genericElement("link");
var Meta = genericElement("meta");
var Base = genericElement("base");
var Title = genericElement("title");
var Script = genericElement("script");
var NoScript = genericElement("noscript");
var Anchor = genericElement("a");
var Break = genericElement("br");
var HorizontalRule = genericElement("hr");
var Div = genericElement("div");
var SpanElement = genericElement("span");
var Template = genericElement("template");
var Slot = genericElement("slot");
var DataList = genericElement("datalist");
var OutputElement = genericElement("output");
export {
  Abbreviation,
  Anchor,
  Application,
  Area,
  Article,
  Aside,
  Audio,
  Base,
  Blockquote,
  Break,
  Button,
  Canvas,
  Checkbox,
  Cite,
  Code,
  Col,
  ColGroup,
  ColorPicker,
  ColumnLayout,
  DataList,
  DatePicker,
  DateTimePicker,
  Definition,
  DeletedText,
  DescriptionDetail,
  DescriptionList,
  DescriptionTerm,
  Details,
  Dialog,
  Div,
  EmailInput,
  Embed,
  Emphasis,
  Fieldset,
  Figcaption,
  Figure,
  FileInput,
  Footer,
  Form,
  GridLayout,
  Header,
  Heading1,
  Heading2,
  Heading3,
  Heading4,
  Heading5,
  Heading6,
  HorizontalRule,
  HtmlMap,
  IFrame,
  Image,
  InsertedText,
  KeyboardInput,
  Label,
  LabelFor,
  LayoutConstructor,
  Legend,
  LinearLayout,
  Link,
  ListItem,
  Main,
  MarkedText,
  Menu,
  Meta,
  Meter,
  Nav,
  NoScript,
  NumberInput,
  ObjectEmbed,
  Option,
  OrderedList,
  Output,
  OutputElement,
  Paragraph,
  PasswordInput,
  Picture,
  Preformatted,
  Progress,
  Quote,
  Radio,
  Range,
  ResetButton,
  SampleOutput,
  Script,
  SearchInput,
  Section,
  Select,
  Slot,
  SmallText,
  Source,
  Span,
  SpanElement,
  Strong,
  Style,
  SubmitButton,
  Subscript,
  Summary,
  Superscript,
  Table,
  TableBody,
  TableCaption,
  TableData,
  TableHead,
  TableHeader,
  TableRow,
  TelInput,
  Template,
  TextArea,
  TextInput,
  Time,
  Title,
  Track,
  UnorderedList,
  UrlInput,
  Variable,
  Video,
  genericElement,
  showIF
};
//# sourceMappingURL=innerscope.js.map
